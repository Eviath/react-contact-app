{"version":3,"sources":["components/menu/index.js","components/jumbotron/index.js","components/contact-list/index.js","App.js","serviceWorker.js","index.js"],"names":["MenuUI","state","activeItem","handleItemClick","e","_ref","name","_this","setState","this","react_default","a","createElement","className","Menu","inverted","secondary","position","Item","target","href","active","onClick","Component","Jumbotron","menu_MenuUI","Container","text","Header","as","icon","textAlign","Icon","Content","ContactsList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleCompShow","showComp","handleCompHide","handleChange","event","_objectSpread2","handleValidation","value","contact","keyval","Date","now","time","toLocaleDateString","date","toLocaleTimeString","randomNum","Math","floor","random","newContact","objectSpread","defineProperty","concat","console","log","deleteItem","key","filteredItems","contacts","filter","id","addItem","newContacts","Array","from","push","title","content","preventDefault","img","createdAt","activeContact","errors","formIsValid","_this2","Contact","List","makeActive","Segment","Group","horizontal","Image","verticalAlign","src","Label","attached","size","Button","animated","hidden","visible","map","assign","contactsLength","length","stateTitle","stateContent","labelPosition","Form","error","onSubmit","Field","Input","iconPosition","placeholder","type","onChange","pointing","selection","divided","relaxed","React","App","components_jumbotron","contact_list_ContactsList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3bd2a683.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Menu } from 'semantic-ui-react'\r\nimport './index.css';\r\n\r\nexport default class MenuUI extends Component {\r\n  state = { activeItem: 'kontakty' }\r\n\r\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name })\r\n\r\n  render() {\r\n    const { activeItem } = this.state\r\n\r\n    return (\r\n      <div className=\"ui container\">\r\n        <Menu inverted secondary>\r\n          <Menu.Menu position='right'>\r\n            <Menu.Item\r\n              name='github'\r\n              target=\"_blank\"\r\n              href='https://github.com/Eviath'\r\n              active={activeItem === 'github'}\r\n              onClick={this.handleItemClick}\r\n            />\r\n            <Menu.Item\r\n              name='eviathos'\r\n              target=\"_blank\"\r\n              href='https://eviathos.pl'\r\n              active={activeItem === 'eviathos'}\r\n              onClick={this.handleItemClick}\r\n            />\r\n          </Menu.Menu>\r\n          \r\n        </Menu>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react'\r\nimport './index.css';\r\nimport MenuUI from \"../menu\"\r\nimport { Header, Icon, Container } from 'semantic-ui-react'\r\n\r\nconst Jumbotron = () => (\r\n  <div className=\"ui jumbotron inverted vertical center aligned segment\">\r\n    <MenuUI/>\r\n\r\n    <div className=\"ui header\">\r\n       <Container className=\"ui header2\" text>\r\n      <Header as='h2' icon inverted textAlign='center'>\r\n      <Icon name='address book outline' />\r\n      <Header.Content>React Contact App</Header.Content>\r\n    </Header>\r\n    </Container>\r\n    </div>\r\n   \r\n    \r\n  </div>\r\n)\r\n\r\nexport default Jumbotron","import React from 'react'\r\nimport {Icon} from 'semantic-ui-react'\r\nimport {List} from 'semantic-ui-react'\r\nimport './index.css';\r\nimport {Button, Form, Label, Segment, Image, Header, Input, Card} from 'semantic-ui-react'\r\n\r\nexport default class ContactsList extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            contacts: [\r\n                {\r\n                    title: 'Jacek',\r\n                    content: '23232324',\r\n                    key: '234235235325',\r\n                    id: '325325235324',\r\n                    img: 'https://api.adorable.io/avatars/55/typeofweb1.png',\r\n                    createdAt: '11.11.2018 09:27:23'\r\n                }, {\r\n                    title: 'Anna',\r\n                    content: '462342533',\r\n                    key: '23423423325',\r\n                    id: '325342342235324',\r\n                    img: 'https://api.adorable.io/avatars/55/typeofweb2.png',\r\n                    createdAt: '11.11.2018 11:47:14'\r\n                }, {\r\n                    title: 'Marcin',\r\n                    content: 'gmail@gmail.com',\r\n                    key: '2342233423325',\r\n                    id: '3253423232342235324',\r\n                    img: 'https://api.adorable.io/avatars/55/typeofweb3.png',\r\n                    createdAt: '11.11.2018 14:17:25'\r\n                }, {\r\n                    title: 'Daniel',\r\n                    content: 'daniel#2324',\r\n                    key: '2342637323423325',\r\n                    id: '3253454542342235324',\r\n                    img: 'https://api.adorable.io/avatars/55/typeofweb4.png',\r\n                    createdAt: '11.11.2018 12:57:55'\r\n                }\r\n            ],\r\n\r\n            contact: {\r\n                title: '',\r\n                content: '',\r\n                key: '',\r\n                id: '',\r\n                img: '',\r\n                createdAt: '',\r\n                active: false,\r\n            },\r\n            activeContact: {\r\n              title: '',\r\n              content: '',\r\n              key: '',\r\n              id: '',\r\n              img: '',\r\n              createdAt: ''\r\n            },\r\n            showComp: false,\r\n            errors: []\r\n        }\r\n\r\n    }\r\n\r\n    // form validation\r\n    handleValidation() {\r\n        let contact = this.state.contact;\r\n        let errors = {};\r\n        let formIsValid = true;\r\n\r\n        //title validation\r\n        if (!contact[\"title\"]) {\r\n            formIsValid = false;\r\n            errors[\"title\"] = \"Nazwa nie może być pusta.\";\r\n        }\r\n\r\n        // content validation\r\n        if (!contact[\"content\"]) {\r\n            formIsValid = false;\r\n            errors[\"content\"] = \"Kontakt nie może być pusty.\";\r\n        }\r\n\r\n        // push errors to state\r\n        this.setState({errors: errors});\r\n\r\n        //  return if formvalidation is true or false\r\n        return formIsValid;\r\n    }\r\n\r\n    // show form component on button click \"DODAJ\"\r\n    handleCompShow = () => {\r\n        this.setState({showComp: true})\r\n    }\r\n\r\n    // hide form component on button click \"Lista Kontaktów\"\r\n    handleCompHide = () => {\r\n        this.setState({showComp: false})\r\n    }\r\n\r\n    makeActive() {\r\n      const contact = this.state.contact;\r\n\r\n      const contacts = this.state.contacts;\r\n   \r\n\r\n     const clickedContact = this.state.contact ;\r\n      this.setState({\r\n      ...contact,\r\n      active: true,\r\n    })\r\n\r\n console.log(contact)\r\n\r\n    }\r\n\r\n\r\n\r\n    // event on input change\r\n    handleChange = (event) => {\r\n\r\n        // validate form on input change\r\n        this.handleValidation()\r\n\r\n        // watch input change and push new contact to state\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n        const {contact} = this.state;\r\n        const keyval = Date.now();\r\n\r\n        const time = new Date().toLocaleDateString();\r\n        const date = new Date().toLocaleTimeString();\r\n\r\n        const randomNum = Math.floor((Math.random() * 100) + 1);;\r\n        const newContact = {\r\n            ...contact,\r\n            [name]: value,\r\n            key: keyval,\r\n            id: keyval,\r\n            img: `https://api.adorable.io/avatars/55/typeofweb${randomNum}.png`,\r\n            createdAt: `${time} ${date}`\r\n        };\r\n\r\n        // set input as contact state\r\n        this.setState({contact: newContact});\r\n        console.log(newContact)\r\n\r\n    }\r\n\r\n    // contact delete on click\r\n    deleteItem = key => {\r\n        // check every contact for id, return only contacts that do not have id the same\r\n        // as clicked element.\r\n        const filteredItems = this\r\n            .state\r\n            .contacts\r\n            .filter(contact => {\r\n                return contact.id !== key\r\n            })\r\n\r\n        this.setState({contacts: filteredItems})\r\n    }\r\n\r\n    // form submit\r\n    addItem = (event) => {\r\n\r\n        if (this.handleValidation()) {\r\n\r\n            // submit form on successfull validation\r\n            const contact = this.state.contact;\r\n            const contacts = this.state.contacts;\r\n\r\n            const newContacts = Array.from(contacts);\r\n\r\n            newContacts.push(contact);\r\n\r\n            this.setState({\r\n                ...contacts,\r\n                contacts: newContacts,\r\n                contact: {\r\n                    title: '',\r\n                    content: ''\r\n                }\r\n            });\r\n\r\n            event.preventDefault();\r\n\r\n        } else {\r\n\r\n            // validation not successfull, stop form submit\r\n            event.preventDefault();\r\n\r\n        }\r\n\r\n    };\r\n\r\n    render() {\r\n\r\n        const {showComp} = this.state;\r\n\r\n        const Contact = contact => {\r\n\r\n            return <List.Item key={contact.id}  onClick={() => this.makeActive(contact.id)}>\r\n\r\n                <Segment.Group horizontal>\r\n                   <Header>\r\n                        <div className=\"header left item\">\r\n                            <Image  verticalAlign='middle' src={contact.img} className=\"ui mini rounded image\"/>\r\n                        </div>\r\n                    </Header>\r\n\r\n                    <Segment>\r\n                               \r\n                    <List.Content>\r\n                            <h4 className=\"header-title\">{contact.title}</h4>\r\n\r\n                            <div className=\"description\">{contact.content}</div>\r\n                        </List.Content>\r\n                        <Label attached='top right'>{contact.createdAt}</Label>\r\n                        \r\n                        <Label size=\"mini\" attached='bottom right'>\r\n                        \r\n\r\n                        \r\n                              <Button animated='vertical'  onClick={() => this.deleteItem(contact.id)} >\r\n      <Button.Content hidden>Usuń</Button.Content>\r\n      <Button.Content visible>\r\n      <Icon name='trash alternate outline' />\r\n      </Button.Content>\r\n    </Button>\r\n                        \r\n                        </Label>\r\n    \r\n                    </Segment>\r\n\r\n                </Segment.Group>\r\n\r\n            </List.Item>\r\n\r\n        }\r\n\r\n        const contacts = this\r\n            .state\r\n            .contacts\r\n            .map(contact => {\r\n                return (<Contact key={contact.key} {...contact}/>);\r\n            });\r\n\r\n        // return contacts array length // number of contacts\r\n        const contactsLength = this.state.contacts.length;\r\n        const stateTitle = this.state.errors.title;\r\n        const stateContent = this.state.errors.content;\r\n\r\n\r\n        return (\r\n\r\n          \r\n\r\n\r\n            <div>\r\n\r\n\r\n\r\n                <header className=\"ui menu\">\r\n                    <nav className=\"ui container\">\r\n\r\n                        <a onClick={this.handleCompHide} href=\"#\" className=\"header item\">\r\n                            <Icon name='address card outline'/>\r\n                            Lista kontaktów\r\n                        </a>\r\n\r\n                        <div className=\"header  item\">\r\n                            <a>\r\n                                <Label >\r\n                                    <Icon name='address card outline'/> {contactsLength}\r\n                                </Label>\r\n                            </a>\r\n                        </div>\r\n\r\n                        <div className=\"header right item\">\r\n                            <Button onClick={this.handleCompShow} icon labelPosition='right'>\r\n                            Dodaj\r\n                                 <Icon name='plus' />\r\n                              </Button>\r\n\r\n\r\n                        </div>\r\n\r\n                    </nav>\r\n                </header>\r\n\r\n                {showComp === true && <div className=\"contact\">\r\n                    <div className=\"header\">\r\n\r\n                        <Form error onSubmit={this.addItem}>\r\n                            <Form.Field>\r\n\r\n                                <label>Nazwa</label>\r\n\r\n                                <Input\r\n                                icon='users' \r\n                                iconPosition='left'\r\n                                    placeholder=\"Nazwa\"\r\n                                    type=\"text\"\r\n                                    name=\"title\"\r\n                                    value={this.state.contact.title}\r\n                                    onChange={this.handleChange}/> {stateTitle && <Label pointing>{stateTitle}</Label>}\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                            \r\n                                <label>Kontakt</label>\r\n\r\n                                <Input\r\n                                 icon='comment outline' \r\n                                 iconPosition='left'\r\n                                    placeholder=\"Kontakt\"\r\n                                    type=\"text\"\r\n                                    name=\"content\"\r\n                                    value={this.state.contact.content}\r\n                                    onChange={this.handleChange}/> {stateContent && <Label pointing>{stateContent}</Label>}\r\n                            </Form.Field>\r\n                            <Button type='submit' animated='vertical'>\r\n      <Button.Content hidden>Zapisz</Button.Content>\r\n      <Button.Content visible>\r\n        <Icon name=\"check\" />\r\n      </Button.Content>\r\n    </Button>\r\n                          \r\n                        </Form>\r\n\r\n                    </div>\r\n                </div>\r\n}\r\n\r\n                <List animated selection divided relaxed>\r\n\r\n                    {contacts}\r\n\r\n                </List>\r\n\r\n\r\n\r\n\r\n\r\n\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n\r\n}","import React, { Component } from 'react';\nimport './App.css';\n\nimport Jumbotron from \"./components/jumbotron\";\nimport ContactsList from \"./components/contact-list\"\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       \n      <Jumbotron/>\n\n    <div>\n      <main className=\"ui contact-list main text container\">\n      <ContactsList />\n      </main>\n    </div>\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport './index.css';\r\n\r\nimport App from './App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}