{"version":3,"sources":["components/menu/index.js","components/jumbotron/index.js","components/contact-list/index.js","App.js","serviceWorker.js","index.js"],"names":["MenuUI","state","activeItem","handleItemClick","e","_ref","name","_this","setState","this","react_default","a","createElement","className","Menu","inverted","secondary","Item","active","onClick","position","target","href","Component","Jumbotron","menu_MenuUI","Container","text","Header","as","icon","textAlign","Icon","Content","ContactsList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleClick","showComp","handleChange","event","_objectSpread2","handleValidation","value","contact","keyval","Date","now","newContact","objectSpread","defineProperty","deleteItem","key","filteredItems","contacts","filter","id","addItem","newContacts","Array","from","push","preventDefault","reset","title","content","errors","formIsValid","match","_this2","Contact","List","alt","src","map","assign","contactsLength","length","stateTitle","stateContent","Form","error","onSubmit","Field","Message","header","Input","placeholder","type","onChange","Button","animated","selection","divided","relaxed","React","App","components_jumbotron","contact_list_ContactsList","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24ad09bf.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Menu } from 'semantic-ui-react'\r\nimport './index.css';\r\n\r\nexport default class MenuUI extends Component {\r\n  state = { activeItem: 'home' }\r\n\r\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name })\r\n\r\n  render() {\r\n    const { activeItem } = this.state\r\n\r\n    return (\r\n      <div className=\"ui container\">\r\n        <Menu inverted secondary>\r\n          <Menu.Item name='home' active={activeItem === 'home'} onClick={this.handleItemClick} />\r\n          <Menu.Item\r\n            name='about'\r\n            active={activeItem === 'about'}\r\n            onClick={this.handleItemClick}\r\n          />\r\n          <Menu.Item\r\n            name='more'\r\n            active={activeItem === 'more'}\r\n            onClick={this.handleItemClick}\r\n          />\r\n          <Menu.Menu position='right'>\r\n            <Menu.Item\r\n              name='github'\r\n              target=\"_blank\"\r\n              href='https://github.com/Eviath'\r\n              active={activeItem === 'github'}\r\n              onClick={this.handleItemClick}\r\n            />\r\n            <Menu.Item\r\n              name='eviathos'\r\n              target=\"_blank\"\r\n              href='https://eviathos.pl'\r\n              active={activeItem === 'eviathos'}\r\n              onClick={this.handleItemClick}\r\n            />\r\n          </Menu.Menu>\r\n          \r\n        </Menu>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react'\r\nimport './index.css';\r\nimport MenuUI from \"../menu\"\r\nimport { Header, Icon, Container } from 'semantic-ui-react'\r\n\r\nconst Jumbotron = () => (\r\n  <div className=\"ui jumbotron inverted vertical center aligned segment\">\r\n    <MenuUI/>\r\n\r\n    <div className=\"ui header\">\r\n       <Container className=\"ui header2\" text>\r\n      <Header as='h2' icon inverted textAlign='center'>\r\n      <Icon name='address book outline' />\r\n      <Header.Content>React Contact App</Header.Content>\r\n    </Header>\r\n    </Container>\r\n    </div>\r\n   \r\n    \r\n  </div>\r\n)\r\n\r\nexport default Jumbotron","import React from 'react'\r\nimport { Icon } from 'semantic-ui-react'\r\nimport { List } from 'semantic-ui-react'\r\nimport './index.css';\r\nimport { Button, Form, Message } from 'semantic-ui-react'\r\n\r\nexport default class ContactsList extends React.Component {\r\n\r\n \r\n constructor(){\r\n  super();\r\n\r\n\r\n  this.state = {\r\n      contacts: [],\r\n      contact: {title:'', content:'', key:'', id:''},\r\n      showComp: false,\r\n      errors: [],\r\n  }\r\n\r\n}\r\n\r\n\r\n// form validation\r\nhandleValidation(){\r\n  let contact = this.state.contact;\r\n  let errors = {};\r\n  let formIsValid = true;\r\n\r\n  //title validation\r\n  if(!contact[\"title\"]){\r\n     formIsValid = false;\r\n     errors[\"title\"] = \"Nazwa nie może być pusta.\";\r\n  }\r\n\r\n  if(typeof contact[\"title\"] !== \"undefined\"){\r\n     if(!contact[\"title\"].match(/^[a-zA-Z]+$/)){\r\n        formIsValid = false;\r\n        errors[\"title\"] = \"W nazwie mogą być tylko litery.\";\r\n     }        \r\n  }\r\n\r\n// content validation\r\n  if(!contact[\"content\"]){\r\n    formIsValid = false;\r\n    errors[\"content\"] = \"Kontakt nie może być pusty.\";\r\n }\r\n\r\n  // push errors to state\r\n this.setState({errors: errors});\r\n\r\n//  return if formvalidation is true or false\r\n return formIsValid;\r\n}\r\n\r\n\r\n\r\n// show form component on button click \"DODAJ\"\r\nhandleClick = () => {\r\n  this.setState({\r\n     showComp: true,\r\n })\r\n}\r\n\r\n\r\n// event on input change\r\nhandleChange = (event) => {\r\n \r\n  // validate form on input change\r\n  this.handleValidation()\r\n  \r\n  // watch input change and push new contact to state\r\n  const name = event.target.name;\r\n  const value = event.target.value;\r\n  const { contact } = this.state;\r\n  const keyval = Date.now();\r\n  const newContact = {\r\n    ...contact,\r\n    [name]: value,\r\n    key: keyval,\r\n  };\r\n\r\n  // set input as contact state\r\n  this.setState({ contact: newContact });\r\n}\r\n\r\n\r\n// contact delete on click\r\ndeleteItem = key => {\r\n  // check every contact for id, return only contacts that do not have id the same as clicked element.\r\n  const filteredItems = this.state.contacts.filter(contact => {\r\n    return contact.id !== key\r\n  })\r\n\r\n  this.setState({\r\n    contacts: filteredItems,\r\n  })\r\n}\r\n\r\n\r\n// form submit\r\naddItem = (event) => {\r\n\r\n  if(this.handleValidation()){\r\n\r\n    // submit form on successfull validation\r\n    const contact = this.state.contact;\r\n    const contacts = this.state.contacts;\r\n    const newContacts = Array.from(contacts);\r\n    const keyval = Date.now();\r\n    newContacts.push(contact);\r\n    this.setState({\r\n      contacts: newContacts,\r\n      contact: {id: keyval}\r\n    });\r\n\r\n    event.preventDefault();\r\n    event.target.reset();\r\n\r\n\r\n }else{\r\n  \r\n    // validation not successfull, stop form submit\r\n    event.preventDefault();\r\n\r\n }\r\n\r\n    \r\n};\r\n\r\n\r\n\r\nrender(){\r\n\r\n  const { showComp } = this.state;\r\n\r\n\r\n  const Contact = contact => {\r\n    const imgUrl = `https://api.adorable.io/avatars/55/typeofweb3.png`;\r\n    \r\n      return   <List.Item key={contact.id} onClick={() => this.deleteItem(contact.id)} >\r\n        <img alt=\"smng\" src={imgUrl} className=\"ui mini rounded image\" />\r\n        <List.Content>\r\n          <h4 className=\"header\">{contact.title}</h4>\r\n          <div className=\"description\">{contact.content}</div>\r\n        </List.Content>\r\n        </List.Item>\r\n \r\n    }\r\n\r\n  const contacts = this.state.contacts.map(contact => {\r\n    return (\r\n\r\n\r\n     \r\n      <Contact\r\n  \r\n      key={contact.key}\r\n        {...contact}\r\n      />\r\n \r\n\r\n\r\n    );\r\n  });\r\n\r\n  // return contacts array length // number of contacts\r\n  const contactsLength =  this.state.contacts.length;\r\n\r\n     const stateTitle = this.state.errors.title;\r\n     const stateContent = this.state.errors.content;\r\n\r\n      return (\r\n  \r\n   <div>\r\n  \r\n          <header className=\"ui menu\">\r\n          <nav className=\"ui container\">\r\n\r\n            <a href=\"#\" className=\"header item\">\r\n             <Icon name='address card outline' />\r\n              Lista kontaktów {contactsLength}\r\n            </a>\r\n\r\n            <div className=\"header item\">\r\n              <button onClick={this.handleClick} className=\"ui button\">Dodaj</button>\r\n            </div>\r\n         \r\n          </nav>\r\n        </header>\r\n         \r\n        \r\n\r\n        {showComp === true && \r\n                  <div className=\"contact\">\r\n                    <div className=\"header\">\r\n\r\n                        <Form error onSubmit={this.addItem}>\r\n                            <Form.Field>\r\n\r\n                            {stateTitle  && \r\n                            <Message\r\n                              error\r\n                              header='Nazwa'\r\n                              content={stateTitle}\r\n                            />}\r\n\r\n                            <label>Nazwa</label>\r\n                            <Form.Input\r\n                              error={stateTitle}\r\n                              placeholder=\"Nazwa\"\r\n                              type=\"text\"\r\n                              name=\"title\"\r\n                              onChange={this.handleChange}/> \r\n                            </Form.Field>\r\n                            <Form.Field>\r\n\r\n                            {stateContent  && \r\n                            <Message\r\n                              error={stateContent}\r\n                              header='Kontakt'\r\n                              content={stateContent}\r\n                            />}\r\n\r\n                            <label>Kontakt</label>\r\n                            <input\r\n                              placeholder=\"Kontakt\"\r\n                              type=\"text\"\r\n                              name=\"content\"\r\n                              onChange={this.handleChange}/>\r\n                            </Form.Field>\r\n                            \r\n                            <Button type='submit'>Zapisz</Button>\r\n                        </Form>\r\n\r\n                    </div>\r\n                </div>\r\n}\r\n\r\n      \r\n          <List animated selection divided relaxed> \r\n    \r\n          {contacts}\r\n      \r\n     \r\n          \r\n          \r\n          </List>\r\n\r\n     </div>\r\n  \r\n  \r\n        );\r\n  \r\n      }\r\n\r\n\r\n  }","import React, { Component } from 'react';\nimport './App.css';\n\nimport Jumbotron from \"./components/jumbotron\";\nimport ContactsList from \"./components/contact-list\"\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       \n      <Jumbotron/>\n\n    <div>\n      <main className=\"ui contact-list main text container\">\n      <ContactsList />\n      </main>\n    </div>\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}